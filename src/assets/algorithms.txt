Kanden
missing number 1...N - two versions: one that handles large number of items
smart stack with getMin
array sum until index + change item
https://www.geeksforgeeks.org/count-pairs-with-given-sum/
https://www.log2base2.com/data-structures/array/remove-a-specific-element-from-array.html

------------------------------------------------------------------

Minimum heap from React scheduler code:
taken from (https://programmer.group/exploring-the-inner-of-react-postmessage-scheduler.html)
Note the code is written in flow, so we must convert it to JS:


type Heap = Array<Node>;
type Node = {|
  id: number,
  sortIndex: number,
|};

//////////////////////
// Pushing the heap //
//////////////////////

export function push(heap: Heap, node: Node): void {
  const index = heap.length;	// index will become the index of the element we push next line
  heap.push(node);				// Push
  siftUp(heap, node, index);	// Then sort, note we provide the index of the element we've just pushed
}

function siftUp(heap, node, i) {
  let index = i;
  while (true) {
    const parentIndex = (index - 1) >>> 1;
    const parent = heap[parentIndex];
    if (parent !== undefined && compare(parent, node) > 0) {
      // The parent is larger. Swap positions.
      heap[parentIndex] = node;
      heap[index] = parent;
      index = parentIndex;
    } else {
      // The parent is smaller. Exit.
      return;
    }
  }
}

function compare(a, b) {
  // Compare sort index first, then task id.
  const diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}

/////////////////////
// Poping the heap //
/////////////////////

export function pop(heap: Heap): Node | null {
  const first = heap[0];
  if (first !== undefined) {
    const last = heap.pop();
    if (last !== first) {
      heap[0] = last;
      siftDown(heap, last, 0);
    }
    return first;
  } else {
    return null;
  }
}

function siftDown(heap, node, i) {
  let index = i;
  const length = heap.length;
  while (index < length) {
    const leftIndex = (index + 1) * 2 - 1;
    const left = heap[leftIndex];
    const rightIndex = leftIndex + 1;
    const right = heap[rightIndex];

    // If the left or right node is smaller, swap with the smaller of those.
    if (left !== undefined && compare(left, node) < 0) {
      if (right !== undefined && compare(right, left) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        heap[index] = left;
        heap[leftIndex] = node;
        index = leftIndex;
      }
    } else if (right !== undefined && compare(right, node) < 0) {
      heap[index] = right;
      heap[rightIndex] = node;
      index = rightIndex;
    } else {
      // Neither child is smaller. Exit.
      return;
    }
  }
}

------------------------------------------------------------------

